@model Saad.Models.HomeDashboardViewModel
@{
    ViewBag.Title = "Widgets";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-9">
        <h2>Resumo</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Dashboard_1", "Dashboards")">Home</a>
            </li>
            <li class="active">
                <strong>Resumo</strong>
            </li>
        </ol>
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <p>Seja bem vindo, @{ Html.RenderAction("RetrieveLoggedUserName", "Account"); }</p>

        </div>
    </div>
    
    @if (User.IsInRole(Saad.Lib.Data.Helpers.ApplicationUserRoles.Admin) || User.IsInRole(Saad.Lib.Data.Helpers.ApplicationUserRoles.Customer)) {

        using (@Html.BeginForm("Index", "Home", FormMethod.Post, new { @class = "form-horizontal m-t-lg" })) {
            <div class="form-group">
                <label class="control-label col-md-2" for="exampleInputName2">Período de</label>
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.StartDate, new { @class = "form-control date pull-left", style = "width:120px" })
                    <span style="float: left;display: table-cell;position: relative;margin: 8px;"> até </span>
                    @Html.TextBoxFor(m => m.FinishDate, new { @class = "form-control date", style="width:120px" })
                </div>
                
            </div>
            <div class="form-group">
                <label class="control-label col-md-2" for="exampleInputName2">Fornecedor</label>
                <div class="col-md-5">
                    @Html.DropDownListFor(m => m.Supplier, @Html.GetSuppliers(), "Selecione", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Obra:</label>
                <div class="col-sm-5">
                    @Html.DropDownListFor(m => m.WorkId, @Html.GetWorks(), "Selecione", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-offset-2">
                <button type="submit" class="btn btn-primary">Pesquisar</button>
            </div>
        }


        <div class="row m-t-lg">
        
            <div class="col-lg-6">
                
                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Homologação </h5>
                    </div>
                    <div class="ibox-content">
                        <div>
                            <canvas id="homologation" height="180"></canvas>
                        </div>

                        @if (Model.HomologationData != null) {
                            double total = Model.HomologationData.Sum(t => t.Value);
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Status</th>
                                        <th>Qtde</th>
                                        <th>%</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in Model.HomologationData) {
                                        <tr>
                                            <td>@data.Key</td>
                                            <td>@data.Value</td>
                                            <td>@((data.Value/total).ToString("0.0%"))</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total</td>
                                        <td>@total</td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        }

                    </div>
                </div>

            </div>

            <div class="col-lg-6">

                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Análise Mensal </h5>
                    </div>
                    <div class="ibox-content">
                        <div>
                            <canvas id="monthlyRequest" height="180"></canvas>
                        </div>

                        @if (Model.MonthlyAnalysisData != null) {
                            double total = Model.MonthlyAnalysisData.Sum(t => t.Value);
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Status</th>
                                        <th>Qtde</th>
                                        <th>%</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in Model.MonthlyAnalysisData) {
                                        <tr>
                                            <td>@data.Key</td>
                                            <td>@data.Value</td>
                                            <td>@((data.Value / total).ToString("0.0%"))</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total</td>
                                        <td>@total</td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        }

                    </div>
                </div>

            </div>

        </div>

        <div class="row m-t-lg">

            <div class="col-lg-6">

                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Contencioso </h5>
                    </div>
                    <div class="ibox-content">
                        <div>
                            <canvas id="litigation" height="180"></canvas>
                        </div>

                        @if (Model.LitigationData != null) {
                            double total = Model.LitigationData.Sum(t => t.Value);
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Status</th>
                                        <th>Qtde</th>
                                        <th>%</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in Model.LitigationData) {
                                        <tr>
                                            <td>@data.Key</td>
                                            <td>@data.Value</td>
                                            <td>@((data.Value / total).ToString("0.0%"))</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td>Total</td>
                                        <td>@total</td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        }

                    </div>
                </div>

            </div>

        

        </div>

        if (Model.SupplierData != null) {
            <div class="row m-t-lg">
                <div class="col-md-12">
                    <div class="ibox float-e-margins">
                        <div class="ibox-title">
                            <h5>
                                Fornecedor
                            </h5>
                            <div ibox-tools></div>
                        </div>
                        <div class="ibox-content">
                            <div>
                                <canvas id="lineChart" height="140"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
    }

</div>

@section styles{
    <link rel="stylesheet" type="text/css" href="~/Content/PagedList.css">
    @Styles.Render("~/plugins/dataPickerStyles")
}


@section Scripts {
    @Scripts.Render("~/plugins/chartjs")
    @Scripts.Render("~/plugins/dataPicker") 

    <script type="text/javascript">
    var homologationChart;
    var monthlyChart;
    var litigationChart;
    var searchStatus = "";

    var statusArray = [
        { code: "WaitingForDocuments", name: "Aguardando documentos" },
        { code: "WaitingForAnalysis", name: "Aguardando análise" },
        { code: "WaitingForFeedback", name: "Aguardando Parecer" },
        { code: "Approved", name: "Aprovada" },
        { code: "ApprovedWithReservationsLevel1", name: "Aprovada com reserva - Nível 1" },
        { code: "ApprovedWithReservationsLevel2", name: "Aprovada com reserva - Nível 2" },
        { code: "Disapproved", name: "Reprovado" }
    ];

    function findStatus(status, index, array) {
        return status.name === searchStatus;
    }

    $(document).ready(function () {

        $('.date').datepicker({
            format: 'dd/mm/yyyy',
            keyboardNavigation: false,
            forceParse: false,
            autoclose: true,
            todayHighlight: true
        });


        var doughnutData = {
            labels:  [ @Html.Raw(Model.GetHomologationKeyArray()) ],
            datasets: [{
                data: [ @Html.Raw(Model.GetHomologationValueArray()) ],
                backgroundColor: ["#00A652", "#683091", "#1081C5", "#EE2B31", "#0C4D9F", "#67BC45"]
            }],
            click: function (e) {
                alert(e);
            }
        };


        var homologationOptions = {
            responsive: true,
            legend: {
                display: true,
                position: 'bottom'
            }, onClick: function (data) {
                a = homologationChart.getElementsAtEvent(data);
                var searchStatus = a[0]._model.label;
                var status = statusArray.find(function (element, index, array) { return element.name == searchStatus });
                var startDate = $("#StartDate").val();
                var finishDate = $("#FinishDate").val();

                window.location = '/AnalysisRequest?q=&service=&type=Homologation&status=' + status.code + '&referencedate=' + startDate + '&endreferencedate=' + finishDate;

            }
        };


        var ctx4 = document.getElementById("homologation").getContext("2d");
        homologationChart = new Chart(ctx4, { type: 'doughnut', data: doughnutData, options: homologationOptions });

        var monthlyAnalysisData = {
            labels:  [ @Html.Raw(Model.GetMonthlyAnalysisKeyArray()) ],
            datasets: [{
                data: [ @Html.Raw(Model.GetMonthlyAnalysisValueArray()) ],
                backgroundColor: ["#00A652", "#683091", "#1081C5", "#EE2B31", "#0C4D9F", "#67BC45"]
            }]
        };

        var monthlyAnalysisOptions = {
            responsive: true,
            legend: {
                display: true,
                position: 'bottom'
            }, onClick: function (data) {
                a = monthlyChart.getElementsAtEvent(data);
                var searchStatus = a[0]._model.label;
                var status = statusArray.find(function (element, index, array) { return element.name == searchStatus });
                var startDate = $("#StartDate").val();
                var finishDate = $("#FinishDate").val();

                window.location = '/AnalysisRequest?q=&service=&type=MonthlyAnalysis&status=' + status.code + '&referencedate=' + startDate + '&endreferencedate=' + finishDate;

            }
        };

        var ctx5 = document.getElementById("monthlyRequest").getContext("2d");
        monthlyChart = new Chart(ctx5, { type: 'doughnut', data: monthlyAnalysisData, options: monthlyAnalysisOptions });

        //litigation chart

        var litigationData = {
            labels:  [ @Html.Raw(Model.GetLitigationKeyArray()) ],
            datasets: [{
                data: [ @Html.Raw(Model.GetLitigationValueArray()) ],
                backgroundColor: ["#00A652", "#683091", "#1081C5", "#EE2B31", "#0C4D9F", "#67BC45"]
            }]
        };

        var litigationOptions = {
            responsive: true,
            legend: {
                display: true,
                position: 'bottom'
            }, onClick: function (data) {
                a = litigationChart.getElementsAtEvent(data);
                var searchStatus = a[0]._model.label;
                var status = statusArray.find(function (element, index, array) { return element.name == searchStatus });
                var startDate = $("#StartDate").val();
                var finishDate = $("#FinishDate").val();

                window.location = '/AnalysisRequest?q=&service=&type=Litigation&status=' + status.code + '&referencedate=' + startDate + '&endreferencedate=' + finishDate;

            }
        };

        var ctx6 = document.getElementById("litigation").getContext("2d");
        litigationChart = new Chart(ctx6, { type: 'doughnut', data: litigationData, options: litigationOptions });

        //

        var line = $("#lineChart");
        if (line != null) {
            var lineData = {
                labels: [ @Html.Raw(Model.GetSupplierKeyArray())],
                datasets: [

                    {
                        label: "Evolução",
                        backgroundColor: 'rgba(26,179,148,0.5)',
                        borderColor: "rgba(26,179,148,0.7)",
                        pointBackgroundColor: "rgba(26,179,148,1)",
                        pointBorderColor: "#fff",
                        data: [ @Html.Raw(Model.GetSupplierValueArray())]
                    }

                ]
            };

            var lineOptions = {
                responsive: true
            };


            var ctx = document.getElementById("lineChart").getContext("2d");
            new Chart(ctx, { type: 'line', data: lineData, options: lineOptions });

        }

    });



</script>

}